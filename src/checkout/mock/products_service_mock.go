// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Arthur199212/microservices-demo/gen/services/products/v1 (interfaces: ProductsServiceClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	productsv1 "github.com/Arthur199212/microservices-demo/gen/services/products/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockProductsServiceClient is a mock of ProductsServiceClient interface.
type MockProductsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductsServiceClientMockRecorder
}

// MockProductsServiceClientMockRecorder is the mock recorder for MockProductsServiceClient.
type MockProductsServiceClientMockRecorder struct {
	mock *MockProductsServiceClient
}

// NewMockProductsServiceClient creates a new mock instance.
func NewMockProductsServiceClient(ctrl *gomock.Controller) *MockProductsServiceClient {
	mock := &MockProductsServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsServiceClient) EXPECT() *MockProductsServiceClientMockRecorder {
	return m.recorder
}

// GetProduct mocks base method.
func (m *MockProductsServiceClient) GetProduct(arg0 context.Context, arg1 *productsv1.GetProductRequest, arg2 ...grpc.CallOption) (*productsv1.GetProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProduct", varargs...)
	ret0, _ := ret[0].(*productsv1.GetProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductsServiceClientMockRecorder) GetProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductsServiceClient)(nil).GetProduct), varargs...)
}

// ListProducts mocks base method.
func (m *MockProductsServiceClient) ListProducts(arg0 context.Context, arg1 *productsv1.ListProductsRequest, arg2 ...grpc.CallOption) (*productsv1.ListProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProducts", varargs...)
	ret0, _ := ret[0].(*productsv1.ListProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockProductsServiceClientMockRecorder) ListProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductsServiceClient)(nil).ListProducts), varargs...)
}
