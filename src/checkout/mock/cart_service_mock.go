// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Arthur199212/microservices-demo/gen/services/cart/v1 (interfaces: CartServiceClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	cartv1 "github.com/Arthur199212/microservices-demo/gen/services/cart/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCartServiceClient is a mock of CartServiceClient interface.
type MockCartServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceClientMockRecorder
}

// MockCartServiceClientMockRecorder is the mock recorder for MockCartServiceClient.
type MockCartServiceClientMockRecorder struct {
	mock *MockCartServiceClient
}

// NewMockCartServiceClient creates a new mock instance.
func NewMockCartServiceClient(ctrl *gomock.Controller) *MockCartServiceClient {
	mock := &MockCartServiceClient{ctrl: ctrl}
	mock.recorder = &MockCartServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartServiceClient) EXPECT() *MockCartServiceClientMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockCartServiceClient) AddItem(arg0 context.Context, arg1 *cartv1.AddItemRequest, arg2 ...grpc.CallOption) (*cartv1.AddItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddItem", varargs...)
	ret0, _ := ret[0].(*cartv1.AddItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItem indicates an expected call of AddItem.
func (mr *MockCartServiceClientMockRecorder) AddItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockCartServiceClient)(nil).AddItem), varargs...)
}

// ClearCart mocks base method.
func (m *MockCartServiceClient) ClearCart(arg0 context.Context, arg1 *cartv1.ClearCartRequest, arg2 ...grpc.CallOption) (*cartv1.ClearCartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearCart", varargs...)
	ret0, _ := ret[0].(*cartv1.ClearCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearCart indicates an expected call of ClearCart.
func (mr *MockCartServiceClientMockRecorder) ClearCart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCart", reflect.TypeOf((*MockCartServiceClient)(nil).ClearCart), varargs...)
}

// GetCart mocks base method.
func (m *MockCartServiceClient) GetCart(arg0 context.Context, arg1 *cartv1.GetCartRequest, arg2 ...grpc.CallOption) (*cartv1.GetCartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCart", varargs...)
	ret0, _ := ret[0].(*cartv1.GetCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockCartServiceClientMockRecorder) GetCart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockCartServiceClient)(nil).GetCart), varargs...)
}
