// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Arthur199212/microservices-demo/src/checkout/checkout (interfaces: CheckoutService)

// Package mock_checkout is a generated GoMock package.
package mock_checkout

import (
	context "context"
	reflect "reflect"

	checkoutv1 "github.com/Arthur199212/microservices-demo/gen/services/checkout/v1"
	checkout "github.com/Arthur199212/microservices-demo/src/checkout/checkout"
	gomock "github.com/golang/mock/gomock"
)

// MockCheckoutService is a mock of CheckoutService interface.
type MockCheckoutService struct {
	ctrl     *gomock.Controller
	recorder *MockCheckoutServiceMockRecorder
}

// MockCheckoutServiceMockRecorder is the mock recorder for MockCheckoutService.
type MockCheckoutServiceMockRecorder struct {
	mock *MockCheckoutService
}

// NewMockCheckoutService creates a new mock instance.
func NewMockCheckoutService(ctrl *gomock.Controller) *MockCheckoutService {
	mock := &MockCheckoutService{ctrl: ctrl}
	mock.recorder = &MockCheckoutServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckoutService) EXPECT() *MockCheckoutServiceMockRecorder {
	return m.recorder
}

// PlaceOrder mocks base method.
func (m *MockCheckoutService) PlaceOrder(arg0 context.Context, arg1 checkout.PlaceOrderArgs) (*checkoutv1.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceOrder", arg0, arg1)
	ret0, _ := ret[0].(*checkoutv1.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockCheckoutServiceMockRecorder) PlaceOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockCheckoutService)(nil).PlaceOrder), arg0, arg1)
}
