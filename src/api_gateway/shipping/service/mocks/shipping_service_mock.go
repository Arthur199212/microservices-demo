// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Arthur199212/microservices-demo/src/api_gateway/shipping/service (interfaces: ShippingService)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	modelsv1 "github.com/Arthur199212/microservices-demo/gen/models/v1"
	service "github.com/Arthur199212/microservices-demo/src/api_gateway/shipping/service"
	gomock "github.com/golang/mock/gomock"
)

// MockShippingService is a mock of ShippingService interface.
type MockShippingService struct {
	ctrl     *gomock.Controller
	recorder *MockShippingServiceMockRecorder
}

// MockShippingServiceMockRecorder is the mock recorder for MockShippingService.
type MockShippingServiceMockRecorder struct {
	mock *MockShippingService
}

// NewMockShippingService creates a new mock instance.
func NewMockShippingService(ctrl *gomock.Controller) *MockShippingService {
	mock := &MockShippingService{ctrl: ctrl}
	mock.recorder = &MockShippingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShippingService) EXPECT() *MockShippingServiceMockRecorder {
	return m.recorder
}

// GetQuote mocks base method.
func (m *MockShippingService) GetQuote(arg0 context.Context, arg1 service.GetQuoteArgs) (*modelsv1.Money, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuote", arg0, arg1)
	ret0, _ := ret[0].(*modelsv1.Money)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuote indicates an expected call of GetQuote.
func (mr *MockShippingServiceMockRecorder) GetQuote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuote", reflect.TypeOf((*MockShippingService)(nil).GetQuote), arg0, arg1)
}
